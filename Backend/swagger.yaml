openapi: 3.0.3
info:
  title: Ecommerce-site
  description: |-
   This is a simple Ecommerce site the allow users to manage users and products. 
  version: 1.0.0

servers:
  - url: http://localhost:5000/api/v1/
tags:
  - name: Products
    description: Provide Everythings about products
   
   
paths:
  /admin/products/63ca64ad4378c02c55d0f781:
    put:
      tags:
        - Product
      summary: Update an existing Products
      description: Update an existing Product by Id
      operationId: updateProduct  
      requestBody:
        description: Update an existing Product by Id
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
         
        required: true
      responses:
        '200':
          desuppliedscription: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'          
           
        '400':
          description: Invalid ID supplied
        '404':
          description: Product not found
        '405':
          description: Validation exception
      security:
        - petstore_auth:
            - write:Product
            - read:Product

  # ////////////////////////////////////////////////////////////////////////////////////////////////

  /admin/product/new:
    post:
      tags:
        - Product
      summary: Add a New Product to the store
      description: Add a new Product to the store
      operationId: addProduct
      requestBody:
        description: Create a new Product in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
         
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'          
        '405':
          description: Invalid input
      security:
        - petstore_auth:
            - write:Product
            - read:Product

# ////////////////////////////////////////////////////////////////////////////////////////////////////
  /products:
    get:
      tags:
        - Product
      summary: Get all the products
      description: Multiple status values can be provided with comma separated strings
      operationId: Get all the products or Fetch all the products from db
     
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'          
        '400':
          description: Invalid status value
      security:
        - petstore_auth:
            - write:Product
            - read:Product
# /////////////////////////////////////////////////////////////////////////////////////////
  /product/63ca64ad4378c02c55d0f781:
    get:
      tags:
        - Product
      summary: Find product by ID
      description: Returns a single Product based in Id provided
      operationId: getProductById
      parameters:
        - name: 63ca64ad4378c02c55d0f781
          in: path
          description: ID of Product to return
          required: true
          schema:
            type: Number
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'                      
        '400':
          description: Invalid ID supplied
        '404':
          description: Product not found
      security:
        - api_key: []
        - petstore_auth:
            - write:Product
            - read:Product
  /admin/produc/id:
    delete:
      tags:
        - Product
      summary: Deletes a Product
      description: delete a Product
      operationId: deleteProduct
      parameters:
        - name: 63ca64ad4378c02c55d0f781
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: 63ca64ad4378c02c55d0f781
          in: path
          description: Product id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid product value
      security:
        - petstore_auth:
            - write:product
            - read:product
      # post:
    #   tags:
    #     - pet
    #   summary: Updates a pet in the store with form data
    #   description: ''
    #   operationId: updatePetWithForm
    #   parameters:
    #     - name: petId
    #       in: path
    #       description: ID of pet that needs to be updated
    #       required: true
    #       schema:
    #         type: integer
    #         format: int64
    #     - name: name
    #       in: query
    #       description: Name of pet that needs to be updated
    #       schema:
    #         type: string
    #     - name: status
    #       in: query
    #       description: Status of pet that needs to be updated
    #       schema:
    #         type: string
    #   responses:
    #     '405':
    #       description: Invalid input
    #   security:
    #     - petstore_auth:
    #         - write:pets
    #         - read:pets
  # /pet/{petId}/uploadImage:
  #   post:
  #     tags:
  #       - pet
  #     summary: uploads an image
  #     description: ''
  #     operationId: uploadFile
  #     parameters:
  #       - name: petId
  #         in: path
  #         description: ID of pet to update
  #         required: true
  #         schema:
  #           type: integer
  #           format: int64
  #       - name: additionalMetadata
  #         in: query
  #         description: Additional Metadata
  #         required: false
  #         schema:
  #           type: string
  #     requestBody:
  #       content:
  #         application/octet-stream:
  #           schema:
  #             type: string
  #             format: binary
  #     responses:
  #       '200':
  #         description: successful operation
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/ApiResponse'
  #     security:
  #       - petstore_auth:
  #           - write:pets
  #           - read:pets
# ////////////////////////////////////////////////////////////////////////////////////////////////////////
  
  # /user:
  #   post:
  #     tags:
  #       - user
  #     summary: Create user
  #     description: This can only be done by the logged in user.
  #     operationId: createUser
  #     requestBody:
  #       description: Created user object
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/User'
  #         application/xml:
  #           schema:
  #             $ref: '#/components/schemas/User'
  #         application/x-www-form-urlencoded:
  #           schema:
  #             $ref: '#/components/schemas/User'
  #     responses:
  #       default:
  #         description: successful operation
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/User'
  #           application/xml:
  #             schema:
  #               $ref: '#/components/schemas/User'
  # /user/createWithList:
  #   post:
  #     tags:
  #       - user
  #     summary: Creates list of users with given input array
  #     description: Creates list of users with given input array
  #     operationId: createUsersWithListInput
  #     requestBody:
  #       content:
  #         application/json:
  #           schema:
  #             type: array
  #             items:
  #               $ref: '#/components/schemas/User'
  #     responses:
  #       '200':
  #         description: Successful operation
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/User'          
  #           application/xml:
  #             schema:
  #               $ref: '#/components/schemas/User'
  #       default:
  #         description: successful operation
  # /user/login:
  #   get:
  #     tags:
  #       - user
  #     summary: Logs user into the system
  #     description: ''
  #     operationId: loginUser
  #     parameters:
  #       - name: username
  #         in: query
  #         description: The user name for login
  #         required: false
  #         schema:
  #           type: string
  #       - name: password
  #         in: query
  #         description: The password for login in clear text
  #         required: false
  #         schema:
  #           type: string
  #     responses:
  #       '200':
  #         description: successful operation
  #         headers:
  #           X-Rate-Limit:
  #             description: calls per hour allowed by the user
  #             schema:
  #               type: integer
  #               format: int32
  #           X-Expires-After:
  #             description: date in UTC when token expires
  #             schema:
  #               type: string
  #               format: date-time
  #         content:
  #           application/xml:
  #             schema:
  #               type: string
  #           application/json:
  #             schema:
  #               type: string
  #       '400':
  #         description: Invalid username/password supplied
  # /user/logout:
  #   get:
  #     tags:
  #       - user
  #     summary: Logs out current logged in user session
  #     description: ''
  #     operationId: logoutUser
  #     parameters: []
  #     responses:
  #       default:
  #         description: successful operation
  # /user/{username}:
  #   get:
  #     tags:
  #       - user
  #     summary: Get user by user name
  #     description: ''
  #     operationId: getUserByName
  #     parameters:
  #       - name: username
  #         in: path
  #         description: 'The name that needs to be fetched. Use user1 for testing. '
  #         required: true
  #         schema:
  #           type: string
  #     responses:
  #       '200':
  #         description: successful operation
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/User'          
  #           application/xml:
  #             schema:
  #               $ref: '#/components/schemas/User'
  #       '400':
  #         description: Invalid username supplied
  #       '404':
  #         description: User not found
  #   put:
  #     tags:
  #       - user
  #     summary: Update user
  #     description: This can only be done by the logged in user.
  #     operationId: updateUser
  #     parameters:
  #       - name: username
  #         in: path
  #         description: name that need to be deleted
  #         required: true
  #         schema:
  #           type: string
  #     requestBody:
  #       description: Update an existent user in the store
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/User'
  #         application/xml:
  #           schema:
  #             $ref: '#/components/schemas/User'
  #         application/x-www-form-urlencoded:
  #           schema:
  #             $ref: '#/components/schemas/User'
  #     responses:
  #       default:
  #         description: successful operation
  #   delete:
  #     tags:
  #       - user
  #     summary: Delete user
  #     description: This can only be done by the logged in user.
  #     operationId: deleteUser
  #     parameters:
  #       - name: username
  #         in: path
  #         description: The name that needs to be deleted
  #         required: true
  #         schema:
  #           type: string
  #     responses:
  #       '400':
  #         description: Invalid username supplied
  #       '404':
  #         description: User not found


          # //////////////////////////////////////////////////////////////////////
components:
  schemas:
        # ///////////////////////////////////////////////////////////////////
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        email:
          type: string
          example: example@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '986000000000'
        role:
          type: String
          description: User Status
          example: "user,admin,superadmin"
        Address:
          type: string
          example: Bhaktapur
        createdAt:
          type: Date
          default: 2000-1-1
  # ///////////////////////////////////////////////////////////////////////////////////
    Product:
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: string
          format: string
          example: 63ca64ad4378c02c55d0f781
        name:
          type: string
          example: SanDisk Ultra 128GB SDXC UHS-I Memory Card up to 80MB/s
        price:
          type: integer
          default: 0.0
        description:
          type: string
          example: Somthing related to Product which helps user to know something about the products.
        category:
          type: string/enum
          example: '["Electronics","Headphones","cameras".....]'
        images:
          public_id:
            type: string
          url:
            type: string
          type: String
        seller:
          type: string
          example: 'Your/Seller name'
               
        stock:
          type: number
          description: No of product availabe in store

        user:
          $ref: '#components/schemas/users'
  